// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`CommentCard Component CommentCard renders correctly 1`] = `
ShallowWrapper {
  "complexSelector": ComplexSelector {
    "buildPredicate": [Function],
    "childrenOfNode": [Function],
    "findWhereUnwrapped": [Function],
  },
  "length": 1,
  "node": <CommentCard
    avatarUrl=""
    body=""
    commentVote={[Function]}
    createdAt={0}
    createdBy=""
    deleteComment={[Function]}
    id=""
    name=""
    votes={0}
  />,
  "nodes": Array [
    <CommentCard
      avatarUrl=""
      body=""
      commentVote={[Function]}
      createdAt={0}
      createdBy=""
      deleteComment={[Function]}
      id=""
      name=""
      votes={0}
    />,
  ],
  "options": Object {},
  "renderer": ReactShallowRenderer {
    "_instance": ShallowComponentWrapper {
      "_calledComponentWillUnmount": false,
      "_compositeType": 0,
      "_context": Object {},
      "_currentElement": <Provider
        store={
          Object {
            "dispatch": [Function],
            "getState": [Function],
            "replaceReducer": [Function],
            "subscribe": [Function],
            Symbol(observable): [Function],
          }
        }
      >
        <CommentCard
          avatarUrl=""
          body=""
          commentVote={[Function]}
          createdAt={0}
          createdBy=""
          deleteComment={[Function]}
          id=""
          name=""
          votes={0}
        />
      </Provider>,
      "_debugID": 1,
      "_hostContainerInfo": null,
      "_hostParent": null,
      "_instance": Provider {
        "_reactInternalInstance": [Circular],
        "context": Object {},
        "props": Object {
          "children": <CommentCard
            avatarUrl=""
            body=""
            commentVote={[Function]}
            createdAt={0}
            createdBy=""
            deleteComment={[Function]}
            id=""
            name=""
            votes={0}
          />,
          "store": Object {
            "dispatch": [Function],
            "getState": [Function],
            "replaceReducer": [Function],
            "subscribe": [Function],
            Symbol(observable): [Function],
          },
        },
        "refs": Object {},
        "state": null,
        "store": Object {
          "dispatch": [Function],
          "getState": [Function],
          "replaceReducer": [Function],
          "subscribe": [Function],
          Symbol(observable): [Function],
        },
        "updater": Object {
          "enqueueCallback": [Function],
          "enqueueCallbackInternal": [Function],
          "enqueueElementInternal": [Function],
          "enqueueForceUpdate": [Function],
          "enqueueReplaceState": [Function],
          "enqueueSetState": [Function],
          "isMounted": [Function],
          "validateCallback": [Function],
        },
      },
      "_mountOrder": 1,
      "_pendingCallbacks": null,
      "_pendingElement": null,
      "_pendingForceUpdate": false,
      "_pendingReplaceState": false,
      "_pendingStateQueue": null,
      "_renderedComponent": NoopInternalComponent {
        "_currentElement": <CommentCard
          avatarUrl=""
          body=""
          commentVote={[Function]}
          createdAt={0}
          createdBy=""
          deleteComment={[Function]}
          id=""
          name=""
          votes={0}
        />,
        "_debugID": 2,
        "_renderedOutput": <CommentCard
          avatarUrl=""
          body=""
          commentVote={[Function]}
          createdAt={0}
          createdBy=""
          deleteComment={[Function]}
          id=""
          name=""
          votes={0}
        />,
      },
      "_renderedNodeType": 1,
      "_rootNodeID": 0,
      "_topLevelWrapper": null,
      "_updateBatchNumber": null,
      "_warnedAboutRefsInRender": false,
    },
    "getRenderOutput": [Function],
    "render": [Function],
  },
  "root": [Circular],
  "unrendered": <Provider
    store={
      Object {
        "dispatch": [Function],
        "getState": [Function],
        "replaceReducer": [Function],
        "subscribe": [Function],
        Symbol(observable): [Function],
      }
    }
  >
    <CommentCard
      avatarUrl=""
      body=""
      commentVote={[Function]}
      createdAt={0}
      createdBy=""
      deleteComment={[Function]}
      id=""
      name=""
      votes={0}
    />
  </Provider>,
}
`;
